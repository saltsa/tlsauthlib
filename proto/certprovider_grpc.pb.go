// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/certprovider.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CertProvider_FetchRootCerts_FullMethodName   = "/CertProvider/FetchRootCerts"
	CertProvider_FetchCertificate_FullMethodName = "/CertProvider/FetchCertificate"
)

// CertProviderClient is the client API for CertProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertProviderClient interface {
	FetchRootCerts(ctx context.Context, in *GetRootCertsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[X509BundlesResponse], error)
	FetchCertificate(ctx context.Context, in *SignCertificate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CertificateResponse], error)
}

type certProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewCertProviderClient(cc grpc.ClientConnInterface) CertProviderClient {
	return &certProviderClient{cc}
}

func (c *certProviderClient) FetchRootCerts(ctx context.Context, in *GetRootCertsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[X509BundlesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CertProvider_ServiceDesc.Streams[0], CertProvider_FetchRootCerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRootCertsRequest, X509BundlesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CertProvider_FetchRootCertsClient = grpc.ServerStreamingClient[X509BundlesResponse]

func (c *certProviderClient) FetchCertificate(ctx context.Context, in *SignCertificate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CertificateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CertProvider_ServiceDesc.Streams[1], CertProvider_FetchCertificate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignCertificate, CertificateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CertProvider_FetchCertificateClient = grpc.ServerStreamingClient[CertificateResponse]

// CertProviderServer is the server API for CertProvider service.
// All implementations must embed UnimplementedCertProviderServer
// for forward compatibility.
type CertProviderServer interface {
	FetchRootCerts(*GetRootCertsRequest, grpc.ServerStreamingServer[X509BundlesResponse]) error
	FetchCertificate(*SignCertificate, grpc.ServerStreamingServer[CertificateResponse]) error
	mustEmbedUnimplementedCertProviderServer()
}

// UnimplementedCertProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCertProviderServer struct{}

func (UnimplementedCertProviderServer) FetchRootCerts(*GetRootCertsRequest, grpc.ServerStreamingServer[X509BundlesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchRootCerts not implemented")
}
func (UnimplementedCertProviderServer) FetchCertificate(*SignCertificate, grpc.ServerStreamingServer[CertificateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchCertificate not implemented")
}
func (UnimplementedCertProviderServer) mustEmbedUnimplementedCertProviderServer() {}
func (UnimplementedCertProviderServer) testEmbeddedByValue()                      {}

// UnsafeCertProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertProviderServer will
// result in compilation errors.
type UnsafeCertProviderServer interface {
	mustEmbedUnimplementedCertProviderServer()
}

func RegisterCertProviderServer(s grpc.ServiceRegistrar, srv CertProviderServer) {
	// If the following call pancis, it indicates UnimplementedCertProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CertProvider_ServiceDesc, srv)
}

func _CertProvider_FetchRootCerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRootCertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertProviderServer).FetchRootCerts(m, &grpc.GenericServerStream[GetRootCertsRequest, X509BundlesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CertProvider_FetchRootCertsServer = grpc.ServerStreamingServer[X509BundlesResponse]

func _CertProvider_FetchCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignCertificate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertProviderServer).FetchCertificate(m, &grpc.GenericServerStream[SignCertificate, CertificateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CertProvider_FetchCertificateServer = grpc.ServerStreamingServer[CertificateResponse]

// CertProvider_ServiceDesc is the grpc.ServiceDesc for CertProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CertProvider",
	HandlerType: (*CertProviderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchRootCerts",
			Handler:       _CertProvider_FetchRootCerts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchCertificate",
			Handler:       _CertProvider_FetchCertificate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/certprovider.proto",
}
